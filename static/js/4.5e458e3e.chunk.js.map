{"version":3,"sources":["containers/Auth/Signin.js"],"names":["SignIn","state","controls","email","type","config","id","placeholder","autoComplete","classes","value","validation","required","rule","RegExp","isValid","password","minLength","event","key","val","target","this","length","test","setState","input","Object","keys","map","name","changed","inputChangedHandler","bind","valid","className","onClick","props","onSignIn","to","loading","Component","connect","idToken","auth","refrestToken","userId","dispatch","signin"],"mappings":"sPAQMA,E,4MACJC,MAAQ,CACNC,SAAU,CACRC,MAAO,CACLC,KAAM,QACNC,OAAQ,CACND,KAAM,QACNE,GAAI,gBACJC,YAAa,SACbC,aAAc,OAEhBC,QAAS,cACTC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVC,KAAM,IAAIC,OAAO,wCACjBC,SAAS,IAGbC,SAAU,CACRZ,KAAM,QACNC,OAAQ,CACND,KAAM,WACNE,GAAI,mBACJC,YAAa,WACbC,aAAc,OAEhBC,QAAS,cACTC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVG,SAAS,EACTE,UAAW,M,kEAMCC,EAAOC,GACzB,IAAMC,EAAMF,EAAMG,OAAOX,MACrBK,GAAU,EACVA,GAAWO,KAAKrB,MAAMC,SAASiB,GAAKR,WAAWC,WACjDG,EAAyB,IAAfK,EAAIG,QAGZR,GAAWO,KAAKrB,MAAMC,SAASiB,GAAKR,WAAWM,YACjDF,EAAUK,EAAIG,QAAUD,KAAKrB,MAAMC,SAASiB,GAAKR,WAAWM,WAG1DF,GAAWO,KAAKrB,MAAMC,SAASiB,GAAKR,WAAWE,OACjDE,EAAUO,KAAKrB,MAAMC,SAASiB,GAAKR,WAAWE,KAAKW,KAAKJ,IAG1DE,KAAKG,UAAS,SAACxB,GAGb,OAFAA,EAAMC,SAASiB,GAAKT,MAAQU,EAC5BnB,EAAMC,SAASiB,GAAKR,WAAWI,QAAUA,EAClCd,O,0CAKT,IAAI,IAAIkB,KAAOG,KAAKrB,MAAMC,SACxB,IAAIoB,KAAKrB,MAAMC,SAASiB,GAAKR,WAAWI,QACtC,OAAO,EAGX,OAAO,I,+BAGC,IAAD,OACDW,EAAQC,OAAOC,KAAKN,KAAKrB,MAAMC,UAAU2B,KAAI,SAACC,GAAD,OACjD,kBAAC,IAAD,eACExB,GAAIwB,EACJC,QAAS,EAAKC,oBAAoBC,KAAK,GACvCd,IAAKW,GACD,EAAK7B,MAAMC,SAAS4B,GAJ1B,CAKEI,MAAO,EAAKjC,MAAMC,SAAS4B,GAAMnB,WAAWI,cAGhD,OACE,yBAAKoB,UAAU,QACb,wBAAIA,UAAU,eAAd,WACCT,EACD,4BACEU,QAAS,kBACP,EAAKC,MAAMC,SACT,EAAKrC,MAAMC,SAASC,MAAMO,MAC1B,EAAKT,MAAMC,SAASc,SAASN,QAGjCyB,UAAU,kBAPZ,WAWA,uBAAGA,UAAU,gBAAb,qBACoB,kBAAC,IAAD,CAASI,GAAG,YAAZ,SAEnBjB,KAAKe,MAAMG,QAAU,kBAAC,IAAD,MAAc,U,GAjGvBC,aAsHNC,uBAfS,SAACzC,GACvB,MAAO,CACL0C,QAAS1C,EAAM2C,KAAKD,QACpBE,aAAc5C,EAAM2C,KAAKC,aACzBC,OAAQ7C,EAAM2C,KAAKE,OACnBN,QAASvC,EAAM2C,KAAKJ,YAIG,SAACO,GAC1B,MAAO,CACLT,SAAU,SAACnC,EAAOa,GAAR,OAAqB+B,EAASC,YAAO7C,EAAOa,QAI3C0B,CAA6C1C","file":"static/js/4.5e458e3e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './Auth.scss';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {signin} from '../../store/actions/signin';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass SignIn extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        type: 'input',\r\n        config: {\r\n          type: 'email',\r\n          id: 'Signin__email',\r\n          placeholder: 'E-mail',\r\n          autoComplete: 'off',\r\n        },\r\n        classes: 'Auth__input',\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          rule: new RegExp('^[a-zA-Z0-9]+@[a-zA-Z]+\\\\.[a-zA-Z]+$'),\r\n          isValid: false,\r\n        },\r\n      },\r\n      password: {\r\n        type: 'input',\r\n        config: {\r\n          type: 'password',\r\n          id: 'Signin__password',\r\n          placeholder: 'Password',\r\n          autoComplete: 'off',\r\n        },\r\n        classes: 'Auth__input',\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isValid: false,\r\n          minLength: 8,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  inputChangedHandler(event, key) {\r\n    const val = event.target.value;\r\n    let isValid = true;\r\n    if (isValid && this.state.controls[key].validation.required) {\r\n      isValid = val.length !== 0;\r\n    }\r\n\r\n    if (isValid && this.state.controls[key].validation.minLength) {\r\n      isValid = val.length >= this.state.controls[key].validation.minLength;\r\n    }\r\n\r\n    if (isValid && this.state.controls[key].validation.rule) {\r\n      isValid = this.state.controls[key].validation.rule.test(val);\r\n    }\r\n\r\n    this.setState((state) => {\r\n      state.controls[key].value = val;\r\n      state.controls[key].validation.isValid = isValid;\r\n      return state;\r\n    });\r\n  }\r\n\r\n  validationHandler() {\r\n    for(let key in this.state.controls) {\r\n      if(!this.state.controls[key].validation.isValid) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const input = Object.keys(this.state.controls).map((name) => (\r\n      <Input\r\n        id={name}\r\n        changed={this.inputChangedHandler.bind(this)}\r\n        key={name}\r\n        {...this.state.controls[name]}\r\n        valid={this.state.controls[name].validation.isValid}\r\n      />\r\n    ));\r\n    return (\r\n      <div className='Auth'>\r\n        <h1 className='Auth__title'>Sign In</h1>\r\n        {input}\r\n        <button\r\n          onClick={() =>\r\n            this.props.onSignIn(\r\n              this.state.controls.email.value,\r\n              this.state.controls.password.value,\r\n            )\r\n          }\r\n          className='btn btn--green'\r\n        >\r\n          Sign in\r\n        </button>\r\n        <p className='Auth__signup'>\r\n          New User! Sign up <NavLink to='/sign-up'>here</NavLink>\r\n        </p>\r\n        {this.props.loading ? <Spinner /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    idToken: state.auth.idToken,\r\n    refrestToken: state.auth.refrestToken,\r\n    userId: state.auth.userId,\r\n    loading: state.auth.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSignIn: (email, password) => dispatch(signin(email, password)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n"],"sourceRoot":""}